name: Release
on:
  push:
    branches:
      - release

jobs:
  publish_rust_sdk:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        package:
          - name: longbridge-proto
            registryName: longbridge-proto
            path: rust/crates/proto
          - name: longbridge-httpcli
            registryName: longbridge-httpcli
            path: rust/crates/httpclient
          - name: longbridge-wscli
            registryName: longbridge-wscli
            path: rust/crates/wsclient
          - name: longbridge
            registryName: longbridge
            path: rust
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: get version
        working-directory: ${{ matrix.package.path }}
        run: echo PACKAGE_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV
      - name: check published version
        run: echo PUBLISHED_VERSION=$(cargo search ${{ matrix.package.registryName }} --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV
      - name: cargo login
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        run: cargo login ${{ secrets.CRATES_TOKEN }}
      - name: cargo package
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          cargo package
          echo "We will publish:" $PACKAGE_VERSION
          echo "This is current latest:" $PUBLISHED_VERSION
      - name: Publish ${{ matrix.package.name }}
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "# Cargo Publish"
          cargo publish --no-verify

  build_python_sdk_macos:
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: -i python --release --out dist -m python/Cargo.toml
      - name: Install built wheel - x86_64
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
      - name: Build wheels - universal2
        if: ${{ matrix.python-version >= '3.8' || matrix.python-version == '3.10' }}
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --universal2 --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel - universal2
        if: ${{ matrix.python-version >= '3.8' }}
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build_python_sdk_windows:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        target: [x64, x86]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build_python_sdk_linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        target: [x86_64, i686]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i ${{ matrix.python-version }} --release --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build_python_sdk_linux_cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        target: [aarch64, armv7, s390x, ppc64le]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i ${{ matrix.python-version }} --release --out dist --no-sdist -m python/Cargo.toml
      - uses: uraimo/run-on-arch-action@v2.2.0
        if: matrix.target != 'ppc64'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-venv software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update
            apt-get install -y curl python3.7-venv python3.8-venv python3.9-venv python3.10-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python-version }}
            $PYTHON -m venv venv
            venv/bin/pip install -U pip
            venv/bin/pip install longbridge --no-index --find-links /artifacts --force-reinstall
            venv/bin/python -c 'import longbridge'
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  # publish_python_sdk:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build_python_sdk_macos
  #     - build_python_sdk_windows
  #     - build_python_sdk_linux
  #     - build_python_sdk_linux_cross
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     - name: Publish to PyPi
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         pip install --upgrade twine
  #         twine upload --skip-existing *
