name: Release
on:
  push:
    branches:
      - release
    paths:
      - "**/Cargo.toml"
      - ".github/workflows/release.yml"

jobs:
  publish_rust_sdk:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        package:
          - name: longbridge
            registryName: longbridge
            path: rust
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: get version
        working-directory: ${{ matrix.package.path }}
        run: echo PACKAGE_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV
      - name: check published version
        run: echo PUBLISHED_VERSION=$(cargo search ${{ matrix.package.registryName }} --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV
      - name: cargo login
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        run: cargo login ${{ secrets.CRATES_TOKEN }}
      - name: cargo package
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          cargo package
          echo "We will publish:" $PACKAGE_VERSION
          echo "This is current latest:" $PUBLISHED_VERSION
      - name: Publish ${{ matrix.package.name }}
        if: env.PACKAGE_VERSION != env.PUBLISHED_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "# Cargo Publish"
          cargo publish --no-verify

  build_python_sdk_macos:
    runs-on: macos-latest
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist -m python/Cargo.toml
      - name: Install built wheel - x86_64
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel - universal2
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build_python_sdk_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: x64
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install longbridge --no-index --find-links dist --force-reinstall
          python -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --no-sdist -m python/Cargo.toml
      - uses: uraimo/run-on-arch-action@v2.0.5
        if: matrix.target != 'ppc64'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install longbridge --no-index --find-links dist/ --force-reinstall
            python3 -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: x64
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist --no-sdist -m python/Cargo.toml
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            pip3 install -U pip
            pip3 install longbridge --no-index --find-links /io/dist/ --force-reinstall
            python3 -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist --no-sdist -m python/Cargo.toml
      - uses: uraimo/run-on-arch-action@master
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
            pip3 install -U pip
          run: |
            pip3 install longbridge --no-index --find-links dist/ --force-reinstall
            python3 -c "import longbridge"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, linux-cross, musllinux, musllinux-cross]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
